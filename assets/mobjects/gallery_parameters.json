{"Basic Shapes":[{"image_path":"gallery_assets/Basic_Shapes_001_Dot.png","celltype":"Normal","css":"","code":"mob = Dot(color = YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_002_Circle.png","celltype":"Normal","css":"","code":"mob = Circle(fill_opacity=1, fill_color= ORANGE, stroke_color=YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_003_Annulus.png","celltype":"Normal","css":"","code":"mob = Annulus(inner_radius=0.5, outer_radius=1.2,fill_color= DARK_BLUE, stroke_color=YELLOW, stroke_width=2) "},{"image_path":"gallery_assets/Basic_Shapes_004_Ellipse.png","celltype":"Normal","css":"","code":"mob= Ellipse(color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_005_Sector.png","celltype":"Normal","css":"","code":"mob = Sector(inner_radius=0.5, outer_radius=1.2,fill_color= DARK_BLUE, stroke_color=YELLOW, stroke_width=2) "},{"image_path":"gallery_assets/Basic_Shapes_006_Arc.png","celltype":"Normal","css":"","code":"mob= Arc(radius=1.3, start_angle=-PI/8, angle=PI,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_007_ArcBetweenPoints.png","celltype":"Normal","css":"","code":"mob = ArcBetweenPoints(start=2 * RIGHT, end=2*LEFT, stroke_color=YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_008_Line.png","celltype":"Normal","css":"","code":"mob = Line(color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_009_DashedLine.png","celltype":"Normal","css":"","code":"mob = DashedLine(0.2*LEFT, 0.2*RIGHT,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_010_DashedCircle.png","celltype":"Normal","css":"","code":"circ = Circle(stroke_color=YELLOW) \nmob = DashedVMobject(circ, num_dashes=10) "},{"image_path":"gallery_assets/Basic_Shapes_011_Square.png","celltype":"Normal","css":"","code":"mob= Square(color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_012_Rectangle.png","celltype":"Normal","css":"","code":"mob= Rectangle(width=3.5, height=2.0, color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_013_Rectangle_grid.png","celltype":"Normal","css":"","code":"mob= Rectangle(width=4, height=2.0,grid_xstep=2, grid_ystep=1,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_014_RoundedRectangle1.png","celltype":"Normal","css":"","code":"mob= RoundedRectangle(corner_radius=0.5, color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_015_RoundedRectangle2.png","celltype":"Normal","css":"","code":"mob= RoundedRectangle(corner_radius=0.8, height=2.2, width=2.2,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_016_Elbow.png","celltype":"Normal","css":"","code":"mob = Elbow(width=0.5, angle=0*DEGREES,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_017_RightAngle.png","celltype":"Normal","css":"","code":"line1 = Line( ORIGIN, RIGHT ) \nline2 = Line( ORIGIN, UP ) \nmob = RightAngle(line1, line2, color=YELLOW, stroke_width=7) \nself.add(VGroup(mob,line1, line2).shift(DL*0.3)) "},{"image_path":"gallery_assets/Basic_Shapes_018_Angledot.png","celltype":"Normal","css":"","code":"line1 = Line( LEFT*0.2, RIGHT ) \nline2 = Line( DOWN*0.2, UP ) \na= Angle(line1, line2, dot=True, color=YELLOW, dot_color=YELLOW) \nself.add(VGroup(line1, line2, a).move_to(ORIGIN)) "},{"image_path":"gallery_assets/Basic_Shapes_019_Angle_get_value.png","celltype":"Normal","css":"","code":"line1 = Line((LEFT+(1/3)*UP)*0.1, RIGHT+(1/3)*DOWN) \nline2 = Line((DOWN+(1/3)*RIGHT)*0.1, UP+(1/3)*LEFT) \nangle = Angle(line1, line2, radius=0.3) \nvalue = Integer(angle.get_value(degrees=True), unit=\"^{\\circ}\", color=YELLOW) \nvalue.next_to(angle, UR,buff=0) \nself.add(VGroup(line1, line2, angle, value).move_to(ORIGIN)) "},{"image_path":"gallery_assets/Basic_Shapes_020_Triangle.png","celltype":"Normal","css":"","code":"mob= Triangle(color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_021_Cross.png","celltype":"Normal","css":"","code":"mob= Cross(stroke_color = YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_022_Star.png","celltype":"Normal","css":"","code":"mob= Star(color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_023_RegularPolygram5.png","celltype":"Normal","css":"","code":"mob= RegularPolygram(5,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_024_RegularPolygram6.png","celltype":"Normal","css":"","code":"mob= RegularPolygram(6,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_025_RegularPolygon5.png","celltype":"Normal","css":"","code":"mob= RegularPolygon(5,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_026_RegularPolygon6.png","celltype":"Normal","css":"","code":"mob= RegularPolygon(6,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_027_CutOut.png","celltype":"Normal","css":"","code":"s1 = Square().scale(2.5) \ns2 = Star().shift(LEFT) \ns3 = Circle().shift(RIGHT)  \nc = Cutout(s1, s2, s3, fill_opacity=1, color=YELLOW)  "},{"image_path":"gallery_assets/Basic_Shapes_028_TwoCircles.png","celltype":"Normal","css":"","code":"self.camera.frame.scale(1/25)  \nmob = Circle(color= YELLOW, fill_opacity=1,stroke_width=0).scale(0.1)  \nmob2 = Circle(color= ORANGE, fill_opacity=1,stroke_width=0).scale(0.1) \nx=VGroup(mob,mob2).arrange(RIGHT, buff=-0.1) "},{"image_path":"gallery_assets/Basic_Shapes_029_TwoCirclesIntersection.png","celltype":"Normal","css":"","code":"inter = Intersection(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0)  "},{"image_path":"gallery_assets/Basic_Shapes_030_TwoCirclesExclusion.png","celltype":"Normal","css":"","code":"ex = Exclusion(mob2, mob, color=YELLOW, fill_opacity=1,stroke_width=0) "},{"image_path":"gallery_assets/Basic_Shapes_031_TwoCirclesDifference.png","celltype":"Normal","css":"","code":"diff = Difference(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0) "},{"image_path":"gallery_assets/Basic_Shapes_032_TwoCirclesUnion.png","celltype":"Normal","css":"","code":"uni = Union(mob, mob2, color=YELLOW, fill_opacity=1,stroke_width=0) "},{"image_path":"gallery_assets/Basic_Shapes_033_Arrow.png","celltype":"Normal","css":"","code":"mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_034_ArrowSquareTip.png","celltype":"Normal","css":"","code":"mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowSquareTip) "},{"image_path":"gallery_assets/Basic_Shapes_035_ArrowSquareFilledTip.png","celltype":"Normal","css":"","code":"mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowSquareFilledTip) "},{"image_path":"gallery_assets/Basic_Shapes_036_ArrowCircleTip.png","celltype":"Normal","css":"","code":"mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowCircleTip) "},{"image_path":"gallery_assets/Basic_Shapes_037_ArrowCircleFilledTip.png","celltype":"Normal","css":"","code":"mob = Arrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW, tip_shape=ArrowCircleFilledTip) "},{"image_path":"gallery_assets/Basic_Shapes_038_DoubleArrow.png","celltype":"Normal","css":"","code":"mob = DoubleArrow(0.2*LEFT, 0.2*RIGHT,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_039_CurvedArrow.png","celltype":"Normal","css":"","code":"mob = CurvedArrow(LEFT,RIGHT,color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_040_ParametricFunction.png","celltype":"Normal","css":"","code":"mob = ParametricFunction(lambda t: [t,0.2*np.sin(10*t),0],t_range = [-TAU, TAU],color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_041_CubicBezier.png","celltype":"Normal","css":"","code":"p1 = [-3, 1, 0] \np1b=  p1 + 5 * RIGHT + 2 * UP \np2 = [3, -1, 0] \np2b = p2 + 5 * LEFT \nmob = CubicBezier(p1,p1b, p2b, p2, color=YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_042_Brace.png","celltype":"Normal","css":"","code":"mob = Brace(Line(LEFT*0.5,RIGHT*0.5),color= YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_043_BraceLabel.png","celltype":"Normal","css":"","code":"l=Line(ORIGIN, RIGHT*1.4) \nmob= BraceLabel(l, text= r\"14 \\, \\text{cm}\", color= YELLOW, buff=0.1) \nmob.submobjects[1].set_color(YELLOW) \nself.add(VGroup(l,mob).move_to(ORIGIN)) "},{"image_path":"gallery_assets/Basic_Shapes_044_ArcBrace.png","celltype":"Normal","css":"","code":"arc = Arc(radius=0.5,start_angle=0,angle=5*PI/6) \nbrace = ArcBrace(arc).set_color(YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_045_AnnotationDot.png","celltype":"Normal","css":"","code":"mob = AnnotationDot(stroke_color=YELLOW, fill_color=ORANGE) "},{"image_path":"gallery_assets/Basic_Shapes_046_LabeledDot.png","celltype":"Normal","css":"","code":"mob = LabeledDot(Tex(\"42\", color=BLACK), color=YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_047_ManimBanner.png","celltype":"Normal","css":"","code":"mob = ManimBanner() "},{"image_path":"gallery_assets/Basic_Shapes_048_HTMLBanner.png","celltype":"Normal","css":"","code":"%%manim $params\n#-v WARNING -r 80,80 -s  --disable_caching Example\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"\n        circle = Circle(color=logo_green, fill_opacity=1).shift(LEFT)\n        square = Square(color=logo_blue, fill_opacity=1).shift(UP)\n        triangle = Triangle(color=logo_red, fill_opacity=1).shift(RIGHT)\n        logo = VGroup(triangle, square, circle).scale(1.3)#.scale(2.0) #HERETO\n        logo.move_to(ORIGIN)\n        self.add(logo)\n        self.camera.frame.scale(1/1.5)"},{"image_path":"gallery_assets/Basic_Shapes_049_FlyingFramesBanner.png","celltype":"Normal","css":"","code":"%%manim $params\n#-v WARNING -r 80,80 -s  --disable_caching Example\n\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        logo_green = \"#87c2a5\"\n        logo_blue = \"#525893\"\n        logo_red = \"#e07a5f\"        \n        logo_black = BLACK\n        d= Dot(color= logo_green, radius=0.8).shift(UR*0.6)\n        l = VGroup(*[Line(color=logo_blue, stroke_width=70/3) for _ in range(0,3)])\n        l.arrange(DOWN,buff=0.45).next_to(d, LEFT).shift(0.3*LEFT)\n        l[0::2].shift(0.3*RIGHT)\n        l.rotate(30*DEGREES, about_point=d.get_center())\n        arc= Arc(radius=1.0, color= logo_red, start_angle=PI/4, angle=PI, stroke_width=70)\n        arc.shift(1.75*DOWN+1.15*RIGHT)\n        self.add(arc, d,l) #HERETO\n        self.camera.frame.width = 3 *2 # take this *2 out for logo creation"},{"image_path":"gallery_assets/Basic_Shapes_050_ImageMobject.png","celltype":"Normal","css":"","code":"mob = ImageMobject(image).scale(2)  "},{"image_path":"gallery_assets/Basic_Shapes_051_ImageMobject_nearest.png","celltype":"Normal","css":"","code":"a= np.random.randint(0, 255, size=(3, 4)) \nimg = ImageMobject(np.uint8(a)) \nimg.height = 6 \nimg.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"nearest\"]) "},{"image_path":"gallery_assets/Basic_Shapes_052_ImageMobject_cubic.png","celltype":"Normal","css":"","code":"np.random.seed(41) \na= np.random.randint(0, 255, size=(3, 4)) \nimg = ImageMobject(np.uint8(a)) \nimg.height = 6 \nimg.set_resampling_algorithm(RESAMPLING_ALGORITHMS[\"cubic\"]) "},{"image_path":"gallery_assets/Basic_Shapes_053_SVGMobject.png","celltype":"Normal","css":"","code":"mob = SVGMobject(\"svg_logo.svg\") "},{"image_path":"gallery_assets/Basic_Shapes_054_Matrix.png","celltype":"Normal","css":"","code":"mob = Matrix([[9, 3], [1, 5]]) \nbra = mob.get_brackets() \nbra.set_color(YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_055_Matrix_SurroundingRectangle.png","celltype":"Normal","css":"","code":"mob = Matrix([[\"\\pi\", 3], [1, 5]]) \nmob.add(SurroundingRectangle(mob.get_columns()[1])) "},{"image_path":"gallery_assets/Basic_Shapes_056_MobjectMatrix.png","celltype":"Normal","css":"","code":"a = Circle(color=YELLOW).scale(0.3) \nb = Square().scale(0.3) \nc = MathTex(\"\\pi\").scale(2) \nd = Star(color=YELLOW).scale(0.3) \nmob = MobjectMatrix([[a, b], [c, d]]) "},{"image_path":"gallery_assets/Basic_Shapes_057_Matrix_bracket.png","celltype":"Normal","css":"","code":"mob = Matrix([[2, 0, 4], [-1, 1, 5]], \n    v_buff=0.8, \n    h_buff=0.8, \n    bracket_h_buff=SMALL_BUFF, \n    bracket_v_buff=SMALL_BUFF, \n    left_bracket=\"\\{\", \n    right_bracket=\"\\}\") \nmob.set_row_colors(YELLOW, YELLOW) "},{"image_path":"gallery_assets/Basic_Shapes_058_Table_add_highlighted_cell.png","celltype":"Normal","css":"","code":"mob = Table( \n    [[\"12\", \"200\"], \n    [\"55\",\"393\"]], include_outer_lines=True) \nmob.add_highlighted_cell((1,2), color=YELLOW)     \nmob.add_highlighted_cell((2,2), color=RED)     "},{"image_path":"gallery_assets/Basic_Shapes_059_Code.png","celltype":"Normal","css":"","code":"%%manim $params\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = \"#ece6e2\" #HEREFROM\n        code= \"\"\"j = 1 \nk = \"Hello\" \"\"\"\n        rendered_code = Code(code=code, background_stroke_color= WHITE, tab_width=2, background=\"window\",\n                            language=\"Python\", font=\"Monospace\").scale(3.7) #HERETO\n        rendered_code[2].set_color(YELLOW)\n        rendered_code[2].set_stroke(width=5) \n        self.add(rendered_code)"},{"image_path":"gallery_assets/Basic_Shapes_060_NumberPlane.png","celltype":"Normal","css":"","code":"%%manim $params\nclass Example(ZoomedScene):\n    def construct(self):\n        number_plane = NumberPlane( #HEREFROM\n            x_range=[-10, 10, 1],\n            y_range=[-10, 10, 1],\n            stroke_width=100,\n            axis_config = {\n                \"stroke_color\": YELLOW,\n                \"stroke_width\": 20,\n            },\n            background_line_style={\n                \"stroke_color\": GREY,\n                \"stroke_width\": 15,\n                \"stroke_opacity\": 1\n            }\n        )\n        self.add(number_plane) #HERETO\n        self.camera.frame.scale(1/2)"},{"image_path":"gallery_assets/Basic_Shapes_061_NumberLine.png","celltype":"Normal","css":"","code":"%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[-4, 4, 2],\n            length=2,\n            color=YELLOW,\n            include_numbers=True,\n            label_direction=UP,\n        )\n\n        self.add(mob.move_to(ORIGIN)) #HERETO\n        self.camera.frame.scale(1/5)"},{"image_path":"gallery_assets/Basic_Shapes_062_NumberLine_rotation.png","celltype":"Normal","css":"","code":"%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[0, 4, 1],\n            length=2,\n            include_tip=True,\n            color=YELLOW,\n            include_numbers=True,\n            rotation=10 * DEGREES,\n        )\n        self.add(mob.move_to(ORIGIN)) #HERETO\n        self.camera.frame.scale(1/5)"},{"image_path":"gallery_assets/Basic_Shapes_063_NumberLine_decimal.png","celltype":"Normal","css":"","code":"%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        mob = NumberLine( #HEREFROM\n            x_range=[-4, 4, 2.5], \n            length=3,\n            decimal_number_config={\"num_decimal_places\": 2},\n            include_numbers=True,\n        )\n        mob.numbers[2].set_color(YELLOW) #HERETO\n        self.add(mob.move_to(ORIGIN))\n        self.camera.frame.scale(1/5)"},{"image_path":"gallery_assets/Basic_Shapes_064_BarChart.png","celltype":"Normal","css":"","code":"%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        vals = [1, 3, 2, 5] #HEREFROM\n        labels = [\n            \"foo\",\n            \"bar\",\n            \"foo3\",\n            \"foo2\",\n        ]\n        colors = [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\"]\n        bar = BarChart(\n            vals,\n            bar_colors=colors,\n            bar_names=labels,\n        ) #HERETO\n        self.add(bar) \n        self.camera.frame.scale(1/1.4)"},{"image_path":"gallery_assets/Basic_Shapes_065_Light_change_default.png","celltype":"Normal","css":"","code":"%%manim $params\n\nclass Example(ZoomedScene):\n    def construct(self):\n        self.camera.background_color = WHITE #HEREFROM\n        Text.set_default(color=BLACK)\n        Line.set_default(color=YELLOW)\n        Line.set_default(stroke_width=20)\n\n        mob = Text(\"Light Mode\") \n        l=Line(2*LEFT,2*RIGHT).next_to(mob,DOWN)\n        self.add(mob,l)\n\n        Line.set_default()\n        Text.set_default() #HERETO\n        self.camera.frame.scale(1/4)"}],"Text":[{"image_path":"gallery_assets/Text_001_Text1.png","celltype":"Normal","css":"","code":"mob = Text(\"Hello\", color=WHITE) "},{"image_path":"gallery_assets/Text_002_Text2.png","celltype":"Normal","css":"","code":"mob = Text(\"World\", color=YELLOW,slant=ITALIC) "},{"image_path":"gallery_assets/Text_003_Underline.png","celltype":"Normal","css":"","code":"t = Tex(\"YES\") \nul = Underline(t, color=YELLOW) "},{"image_path":"gallery_assets/Text_004_Bold.png","celltype":"Normal","css":"","code":"mob = Text(\"NO\", color=YELLOW,weight=BOLD)  "},{"image_path":"gallery_assets/Text_005_MathTex.png","celltype":"Normal","css":"","code":"mob = MathTex(r\"\\Psi(x)\", color=WHITE)  "},{"image_path":"gallery_assets/Text_006_MathTex_stix2.png","celltype":"Normal","css":"","code":"stix2 = TexTemplate()  \nstix2.add_to_preamble(r\"\\usepackage{stix2}\", prepend= True)  \nMathTex.set_default(tex_template=stix2)  \nmob = MathTex(r\"\\Psi(x)\", color=WHITE)  "},{"image_path":"gallery_assets/Text_007_MathTex2.png","celltype":"Normal","css":"","code":"mob = MathTex(r\"e^x\",substrings_to_isolate=\"x\") \nmob.set_color_by_tex(\"x\", YELLOW) "},{"image_path":"gallery_assets/Text_008_Check.png","celltype":"Normal","css":"","code":"check= Tex(r\"\\checkmark\", color= GREEN, stroke_width=8).scale(3) \ncheck.stretch(0.8, dim = 1) \ncheck.stretch(1.1, dim = 0) "}],"Camera and Style":[{"image_path":"gallery_assets/Camera_and_Style_001_Background.png","celltype":"Normal","css":"","code":"self.camera.background_color = YELLOW "},{"image_path":"gallery_assets/Camera_and_Style_002_ZoomIN.png","celltype":"Normal","css":"","code":"#needs ZoomedScene \nself.camera.frame.scale(0.6) "},{"image_path":"gallery_assets/Camera_and_Style_003_ZoomOUT.png","celltype":"Normal","css":"","code":"# needs ZoomedScene \nself.camera.frame.scale(1.2) "},{"image_path":"gallery_assets/Camera_and_Style_004_CameraLEFT.png","celltype":"Normal","css":"","code":"# needs ZoomedScene \nself.camera.frame.shift(LEFT*0.5) "},{"image_path":"gallery_assets/Camera_and_Style_005_CameraUP.png","celltype":"Normal","css":"","code":"# needs ZoomedScene \nself.camera.frame.shift(UP*0.4) "},{"image_path":"gallery_assets/Camera_and_Style_006_MatchHEIGHT.png","celltype":"Normal","css":"","code":"# needs ZoomedScene \nself.camera.frame.height =  mob.height + 3*SMALL_BUFF "},{"image_path":"gallery_assets/Camera_and_Style_007_MatchWIDTH.png","celltype":"Normal","css":"","code":"# needs ZoomedScene \nself.camera.frame.width =  mob.width + 3*SMALL_BUFF  "},{"image_path":"gallery_assets/Camera_and_Style_008_FullScreenRectangle.png","celltype":"Normal","css":"","code":"mob = FullScreenRectangle(stroke_width=200, color= YELLOW) "},{"image_path":"gallery_assets/Camera_and_Style_009_SurroundingRectangle.png","celltype":"Normal","css":"","code":"inner = Tex(r\"\\textbf{Hello}\", color=WHITE) \nmob = SurroundingRectangle(inner, corner_radius=0.1) "},{"image_path":"gallery_assets/Camera_and_Style_010_Dot_set_color_by_gradient.png","celltype":"Normal","css":"","code":"mob = Dot(radius=2.0)  \nmob.set_color_by_gradient([PINK, BLUE]) "},{"image_path":"gallery_assets/Camera_and_Style_011_Polygon_set_color.png","celltype":"Normal","css":"","code":"mob = Polygon([-1, .5, 0], [-.5, 2, 0], [1, 2, 0], [1.5, .5, 0], [.25, -.5, 0], sheen_direction = UP) \nmob.set_fill(opacity=.5) \nmob.set_color([TEAL, RED, YELLOW]) \nmob.set_stroke(width=8) \nmob.move_to(ORIGIN) "}],"Plots":[{"image_path":"gallery_assets/Plots_001_Axes_e_x.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"axes = Axes( \n    x_range=[-8, 9, 2], \n    y_range=[-6, 7, 2], \n    x_length=4, \n    y_length=4, \n    axis_config={\"include_numbers\": True, \"numbers_to_exclude\": [0]}, \n    x_axis_config={\"color\": ORANGE}, \n    y_axis_config={\"color\": ORANGE}, \n) \naxes_label = axes.get_axis_labels(x_label=\"x\", y_label=\"f(x)\") \ngraph = axes.plot(lambda x: 5*np.e ** (-x**2/2), x_range=[-5, 5], color=YELLOW) \ngraph_label = axes.get_graph_label(graph, label=\"e^{-x^2}\", color=YELLOW, x_val=1,dot=False) \nself.add(axes, graph, graph_label, axes_label) "},{"image_path":"gallery_assets/Plots_002_Axes_zoom.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"%%manim $params\nclass Example(ZoomedScene):  \n    def __init__(self, **kwargs):   #HEREFROM\n        ZoomedScene.__init__( \n            self, \n            zoom_factor=0.1, \n            zoomed_display_height=6, \n            zoomed_display_width=3,  \n            image_frame_stroke_width=20,  \n            zoomed_camera_config={  \n                \"default_frame_stroke_width\": 3,  \n            },  \n            **kwargs  \n        )      \n      \n    def construct(self):  \n        self.activate_zooming(animate=False)  \n      \n        ax = Axes(  \n            x_range=[0, 10, 2],  \n            y_range=[0,10, 2],  \n            x_length=2,  \n            y_length=2,  \n            x_axis_config={\"color\": ORANGE},  \n            y_axis_config={\"color\": ORANGE},  \n        )  \n        ax.shift(DL)  \n        x_vals = [0, 1, 2, 3,4,5]  \n        y_vals = [2, -1, 4, 2, 4, 1]  \n        graph = ax.plot_line_graph(x_values=x_vals, y_values=y_vals)  \n        self.zoomed_camera.frame.move_to(graph.get_top()+0.1*DL)  \n        self.zoomed_display.shift(3*LEFT+0.4*UP)  \n        self.camera.frame.scale(1/2)  \n        self.camera.frame.shift(UR*1)  \n        self.add(ax, graph)  #HERETO"},{"image_path":"gallery_assets/Plots_003_ComplexPlane.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"plane = ComplexPlane().add_coordinates() \nd1 = Dot(plane.n2p(2 + 1j), color=YELLOW) \nd2 = Dot(plane.n2p(-3 - 2j), color=YELLOW) \nlabel1 = MathTex(\"2+i\").next_to(d1, UR, 0.1) \nlabel2 = MathTex(\"-3-2i\").next_to(d2, UR, 0.1) \nself.add(plane, d1,label1,d2,label2) "},{"image_path":"gallery_assets/Plots_004_PolarPlane.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"polarplane_pi = PolarPlane( \n    azimuth_units=\"PI radians\", \n    size=6, \n    azimuth_label_font_size=33.6, \n    radius_config={\"font_size\": 33.6}, \n).add_coordinates() "},{"image_path":"gallery_assets/Plots_005_Graph_with_Number.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"vertices = [1, 2, 3, 4, 5, 6, 7, 8]  \nedges = [(1, 7), (1, 8), (2, 3), (2, 4), (2, 5),  \n         (2, 8), (3, 4), (6, 1), (6, 2),  \n         (6, 3), (7, 2), (7, 4)]  \ng = Graph(vertices, edges, layout=\"circular\", layout_scale=3,  \n          labels=True, vertex_config={7: {\"fill_color\": RED}},  \n          edge_config={(1, 7): {\"stroke_color\": RED},  \n                       (2, 7): {\"stroke_color\": RED},  \n                       (4, 7): {\"stroke_color\": RED}})  "},{"image_path":"gallery_assets/Plots_006_StreamLines.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"func = lambda pos: ((pos[0]*UR+pos[1]*LEFT) - pos)  \nmob= StreamLines(func,x_range=[-5,5,1], y_range=[-5,5,1],stroke_width=3)  \nself.add(mob)  "},{"image_path":"gallery_assets/Plots_007_ArrowVectorField.png","celltype":"Normal","css":"width: 170px; height: auto;","code":"func = lambda pos: np.sin(pos[1])*RIGHT+np.cos(pos[0])*UP  \nmob = ArrowVectorField(func)  "}],"ManimEmoji":[{"image_path":"gallery_assets/ManimEmoji_001_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\nfrom manim import *\nfrom PIL import Image\nimport numpy as np\nimport requests\nfrom pathlib import Path\n\n\nclass EmojiImageMobject(ImageMobject):\n    def __init__(self, emoji, **kwargs):\n        emoji_code = \"-\".join(f\"{ord(c):x}\" for c in emoji)\n        emoji_code = emoji_code.upper()  # <-  needed for openmojis\n        url = f\"https://raw.githubusercontent.com/hfg-gmuend/openmoji/master/color/618x618/{emoji_code}.png\"\n        im = Image.open(requests.get(url, stream=True).raw)\n        emoji_img = np.array(im.convert(\"RGBA\"))\n        ImageMobject.__init__(self, emoji_img, **kwargs)\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = YELLOW_A\n        em = EmojiImageMobject(\"🐶\").scale(1.1)\n        # when using OpenEmoji, please give credits e.g. like this:\n        # \"All emojis designed by OpenMoji – the open-source emoji and icon project. License: CC BY-SA 4.0\"\n        t = Text(\"OpenMoji\").scale(2.5)\n        Group(em, t).arrange(DOWN).scale(1.5)\n        self.add(em, t)"},{"image_path":"gallery_assets/ManimEmoji_002_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\n\nfrom manim import *\nfrom PIL import Image\nimport numpy as np\nimport urllib.request\nfrom pathlib import Path\n\n\nclass EmojiImageMobject(ImageMobject):\n    def __init__(self, emoji, **kwargs):\n        emoji_code = \"-\".join(f\"{ord(c):x}\" for c in emoji)\n        url = f\"https://raw.githubusercontent.com/twitter/twemoji/master/assets/72x72/{emoji_code}.png\"\n        im = Image.open(requests.get(url, stream=True).raw)\n        emoji_img = np.array(im.convert(\"RGBA\"))\n        ImageMobject.__init__(self, emoji_img, **kwargs)\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = YELLOW_A\n        em = EmojiImageMobject(\"🐶\").scale(6)\n        t = Text(\"Twitter\").scale(4)\n        Group(em, t).arrange(DOWN).scale(1.5)\n        self.add(em, t)"},{"image_path":"gallery_assets/ManimEmoji_003_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\n\nfrom manim import *\nfrom PIL import Image\nimport numpy as np\nimport urllib.request\nfrom pathlib import Path\n\n\nclass EmojiSVGMobject(SVGMobject):\n    def __init__(self, emoji, **kwargs):\n        emoji_code = \"-\".join(f\"{ord(c):x}\" for c in emoji)\n        emoji_code = emoji_code.upper()  # <-  needed for openmojis\n        url = f\"https://raw.githubusercontent.com/hfg-gmuend/openmoji/master/color/svg/{emoji_code}.svg\"\n        path_svg = Path.cwd() / f\"{emoji_code}.svg\"\n        urllib.request.urlretrieve(url, path_svg)\n        SVGMobject.__init__(self, str(path_svg), **kwargs)\n        path_svg.unlink()  # delete downloaded svg again locally\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = GREEN_A\n        em = EmojiSVGMobject(\"🐶\").scale(2.5)\n        t = Text(\"OpenMoji (SVG)\").scale(2)\n        Group(em, t).arrange(DOWN).scale(1.4)\n        self.add(em, t)"},{"image_path":"gallery_assets/ManimEmoji_004_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\n\nfrom manim import *\nfrom PIL import Image\nimport numpy as np\nimport urllib.request\nfrom pathlib import Path\n\n\nclass EmojiSVGMobject(SVGMobject):\n    def __init__(self, emoji, **kwargs):\n        emoji_code = \"-\".join(f\"{ord(c):x}\" for c in emoji)\n        url = f\"https://raw.githubusercontent.com/twitter/twemoji/master/assets/svg/{emoji_code}.svg\"\n        path_svg = Path.cwd() / f\"{emoji_code}.svg\"\n        urllib.request.urlretrieve(url, path_svg)\n        SVGMobject.__init__(self, str(path_svg), **kwargs)\n        path_svg.unlink()  # delete downloaded svg again locally\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = GREEN_A\n        em = EmojiSVGMobject(\"🐶\").scale(2.2)\n        t = Text(\"Twitter (SVG)\").scale(2)\n        Group(em, t).arrange(DOWN).scale(1.6)\n        self.add(em, t)"},{"image_path":"gallery_assets/ManimEmoji_005_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\n\nfrom manim import *\nfrom PIL import Image\nimport numpy as np\nimport urllib.request\nfrom pathlib import Path\n\n\nclass BootstrapSVGMobject(SVGMobject):\n    def __init__(self, emoji, color=BLACK, **kwargs):\n        url = f\"https://raw.githubusercontent.com/twbs/icons/main/icons/{emoji}.svg\"\n        path_svg = Path.cwd() / f\"{emoji}.svg\"\n        urllib.request.urlretrieve(url, path_svg)\n        path_svg.write_text(path_svg.read_text().replace(\"currentColor\", color))\n        SVGMobject.__init__(self, str(path_svg), **kwargs)\n        path_svg.unlink()  # delete downloaded svg again locally\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = GREEN_A\n        em = BootstrapSVGMobject(\"wind\", color=BLACK).scale(2.2)\n        # more at https://icons.getbootstrap.com/\n        t = Text(\"Bootstrap (SVG)\").scale(2)\n        Group(em, t).arrange(DOWN).scale(1.4)\n        self.add(em, t)"},{"image_path":"gallery_assets/ManimEmoji_006_Emoji.png","celltype":"Normal","css":"width: 120px; height: auto;","code":"%%manim -v WARNING --disable_caching -qm -r400,400 Example1\n\n\nclass Example1(Scene):\n    def construct(self):\n        self.camera.background_color = GREEN_A\n        em = BootstrapSVGMobject(\"hourglass-split\", color=BLACK).scale(2.2)\n        # more at https://icons.getbootstrap.com/\n        t = Text(\"Bootstrap (SVG)\").scale(2)\n        Group(em, t).arrange(DOWN).scale(1.4)\n        self.add(em, t)"}]}